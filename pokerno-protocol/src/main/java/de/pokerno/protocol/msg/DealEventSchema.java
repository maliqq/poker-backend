// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from msg.proto

package de.pokerno.protocol.msg;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class DealEventSchema
       implements Schema<DealEvent> {

    public enum EventType implements com.dyuproject.protostuff.EnumLite<EventType>
    {
        DEAL_CARDS(1),
        REQUIRE_BET(2),
        REQUIRE_DISCARD(3),
        DECLARE_POT(4),
        DECLARE_HAND(5),
        DECLARE_WINNER(6),
        TICK_TIMER(7);
        
        public final int number;
        
        private EventType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static EventType valueOf(int number)
        {
            switch(number) 
            {
                case 1: return DEAL_CARDS;
                case 2: return REQUIRE_BET;
                case 3: return REQUIRE_DISCARD;
                case 4: return DECLARE_POT;
                case 5: return DECLARE_HAND;
                case 6: return DECLARE_WINNER;
                case 7: return TICK_TIMER;
                default: return null;
            }
        }
    }


    static final DealEvent DEFAULT_INSTANCE = new DealEvent();
    static final Schema<DealEvent> SCHEMA = new DealEventSchema();

    public static DealEvent getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<DealEvent> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_TYPE = 1;
    public static final int FIELD_DEAL_CARDS = 2;
    public static final int FIELD_REQUIRE_BET = 3;
    public static final int FIELD_REQUIRE_DISCARD = 4;
    public static final int FIELD_DECLARE_POT = 5;
    public static final int FIELD_DECLARE_HAND = 6;
    public static final int FIELD_DECLARE_WINNER = 7;
    public static final int FIELD_TICK_TIMER = 8;

    public DealEventSchema() {}


    public DealEvent newMessage() {
        return new DealEvent();
    }

    public Class<DealEvent> typeClass() {
        return DealEvent.class;
    }

    public String messageName() {
        return DealEvent.class.getSimpleName();
    }

    public String messageFullName() {
        return DealEvent.class.getName();
    }


    public boolean isInitialized(DealEvent message) {
        return true;
    }


    public void mergeFrom(Input input, DealEvent message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, DealEvent message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_TYPE:
                message.setType(EventType.valueOf(input.readEnum()));
                break;
            case FIELD_DEAL_CARDS:
                message.setDealCards(input.mergeObject(message.getDealCards(), DealCardsSchema.getSchema()));
                break;

            case FIELD_REQUIRE_BET:
                message.setRequireBet(input.mergeObject(message.getRequireBet(), RequireBetSchema.getSchema()));
                break;

            case FIELD_REQUIRE_DISCARD:
                message.setRequireDiscard(input.mergeObject(message.getRequireDiscard(), RequireDiscardSchema.getSchema()));
                break;

            case FIELD_DECLARE_POT:
                message.setDeclarePot(input.mergeObject(message.getDeclarePot(), DeclarePotSchema.getSchema()));
                break;

            case FIELD_DECLARE_HAND:
                message.setDeclareHand(input.mergeObject(message.getDeclareHand(), DeclareHandSchema.getSchema()));
                break;

            case FIELD_DECLARE_WINNER:
                message.setDeclareWinner(input.mergeObject(message.getDeclareWinner(), DeclareWinnerSchema.getSchema()));
                break;

            case FIELD_TICK_TIMER:
                message.setTickTimer(input.mergeObject(message.getTickTimer(), TickTimerSchema.getSchema()));
                break;

            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_TYPE, FIELD_DEAL_CARDS, FIELD_REQUIRE_BET, FIELD_REQUIRE_DISCARD, FIELD_DECLARE_POT, FIELD_DECLARE_HAND, FIELD_DECLARE_WINNER, FIELD_TICK_TIMER };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, DealEvent message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, DealEvent message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_TYPE:
                output.writeEnum(FIELD_TYPE, message.getType().number, false);    break;
            case FIELD_DEAL_CARDS:
                if (message.getDealCards() != null)
                    output.writeObject(FIELD_DEAL_CARDS, message.getDealCards(), DealCardsSchema.getSchema(), false);

                break;
            case FIELD_REQUIRE_BET:
                if (message.getRequireBet() != null)
                    output.writeObject(FIELD_REQUIRE_BET, message.getRequireBet(), RequireBetSchema.getSchema(), false);

                break;
            case FIELD_REQUIRE_DISCARD:
                if (message.getRequireDiscard() != null)
                    output.writeObject(FIELD_REQUIRE_DISCARD, message.getRequireDiscard(), RequireDiscardSchema.getSchema(), false);

                break;
            case FIELD_DECLARE_POT:
                if (message.getDeclarePot() != null)
                    output.writeObject(FIELD_DECLARE_POT, message.getDeclarePot(), DeclarePotSchema.getSchema(), false);

                break;
            case FIELD_DECLARE_HAND:
                if (message.getDeclareHand() != null)
                    output.writeObject(FIELD_DECLARE_HAND, message.getDeclareHand(), DeclareHandSchema.getSchema(), false);

                break;
            case FIELD_DECLARE_WINNER:
                if (message.getDeclareWinner() != null)
                    output.writeObject(FIELD_DECLARE_WINNER, message.getDeclareWinner(), DeclareWinnerSchema.getSchema(), false);

                break;
            case FIELD_TICK_TIMER:
                if (message.getTickTimer() != null)
                    output.writeObject(FIELD_TICK_TIMER, message.getTickTimer(), TickTimerSchema.getSchema(), false);

                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_TYPE: return "type";
            case FIELD_DEAL_CARDS: return "dealCards";
            case FIELD_REQUIRE_BET: return "requireBet";
            case FIELD_REQUIRE_DISCARD: return "requireDiscard";
            case FIELD_DECLARE_POT: return "declarePot";
            case FIELD_DECLARE_HAND: return "declareHand";
            case FIELD_DECLARE_WINNER: return "declareWinner";
            case FIELD_TICK_TIMER: return "tickTimer";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("type", FIELD_TYPE);
        fieldMap.put("dealCards", FIELD_DEAL_CARDS);
        fieldMap.put("requireBet", FIELD_REQUIRE_BET);
        fieldMap.put("requireDiscard", FIELD_REQUIRE_DISCARD);
        fieldMap.put("declarePot", FIELD_DECLARE_POT);
        fieldMap.put("declareHand", FIELD_DECLARE_HAND);
        fieldMap.put("declareWinner", FIELD_DECLARE_WINNER);
        fieldMap.put("tickTimer", FIELD_TICK_TIMER);
    }
}
