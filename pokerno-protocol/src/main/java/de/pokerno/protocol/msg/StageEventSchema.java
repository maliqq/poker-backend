// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from msg.proto

package de.pokerno.protocol.msg;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class StageEventSchema
       implements Schema<StageEvent> {

    public enum EventType implements com.dyuproject.protostuff.EnumLite<EventType>
    {
        START(1),
        STOP(2);
        
        public final int number;
        
        private EventType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static EventType valueOf(int number)
        {
            switch(number) 
            {
                case 1: return START;
                case 2: return STOP;
                default: return null;
            }
        }
    }
    public enum StageType implements com.dyuproject.protostuff.EnumLite<StageType>
    {
        PLAY(1),
        STREET(2);
        
        public final int number;
        
        private StageType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static StageType valueOf(int number)
        {
            switch(number) 
            {
                case 1: return PLAY;
                case 2: return STREET;
                default: return null;
            }
        }
    }
    public enum StreetType implements com.dyuproject.protostuff.EnumLite<StreetType>
    {
        PREFLOP(1),
        FLOP(2),
        TURN(3),
        RIVER(4),
        SECOND(5),
        THIRD(6),
        FOURTH(7),
        FIFTH(8),
        SIXTH(9),
        SEVENTH(10),
        PREDRAW(11),
        DRAW(12),
        FIRST_DRAW(13),
        SECOND_DRAW(14),
        THIRD_DRAW(15);
        
        public final int number;
        
        private StreetType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static StreetType valueOf(int number)
        {
            switch(number) 
            {
                case 1: return PREFLOP;
                case 2: return FLOP;
                case 3: return TURN;
                case 4: return RIVER;
                case 5: return SECOND;
                case 6: return THIRD;
                case 7: return FOURTH;
                case 8: return FIFTH;
                case 9: return SIXTH;
                case 10: return SEVENTH;
                case 11: return PREDRAW;
                case 12: return DRAW;
                case 13: return FIRST_DRAW;
                case 14: return SECOND_DRAW;
                case 15: return THIRD_DRAW;
                default: return null;
            }
        }
    }


    static final StageEvent DEFAULT_INSTANCE = new StageEvent();
    static final Schema<StageEvent> SCHEMA = new StageEventSchema();

    public static StageEvent getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<StageEvent> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_TYPE = 1;
    public static final int FIELD_STAGE = 2;
    public static final int FIELD_STREET = 3;

    public StageEventSchema() {}


    public StageEvent newMessage() {
        return new StageEvent();
    }

    public Class<StageEvent> typeClass() {
        return StageEvent.class;
    }

    public String messageName() {
        return StageEvent.class.getSimpleName();
    }

    public String messageFullName() {
        return StageEvent.class.getName();
    }


    public boolean isInitialized(StageEvent message) {
        return true;
    }


    public void mergeFrom(Input input, StageEvent message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, StageEvent message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_TYPE:
                message.setType(EventType.valueOf(input.readEnum()));
                break;
            case FIELD_STAGE:
                message.setStage(StageType.valueOf(input.readEnum()));
                break;
            case FIELD_STREET:
                message.setStreet(StreetType.valueOf(input.readEnum()));
                break;
            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_TYPE, FIELD_STAGE, FIELD_STREET };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, StageEvent message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, StageEvent message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_TYPE:
                output.writeEnum(FIELD_TYPE, message.getType().number, false);    break;
            case FIELD_STAGE:
                output.writeEnum(FIELD_STAGE, message.getStage().number, false);    break;
            case FIELD_STREET:
                if (message.getStreet() != null)
                    output.writeEnum(FIELD_STREET, message.getStreet().number, false);
                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_TYPE: return "type";
            case FIELD_STAGE: return "stage";
            case FIELD_STREET: return "street";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("type", FIELD_TYPE);
        fieldMap.put("stage", FIELD_STAGE);
        fieldMap.put("street", FIELD_STREET);
    }
}
