// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from wire.proto

package de.pokerno.protocol.wire;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class StakeSchema
       implements Schema<Stake> {


    static final Stake DEFAULT_INSTANCE = new Stake();
    static final Schema<Stake> SCHEMA = new StakeSchema();

    public static Stake getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<Stake> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_BIG_BLIND = 1;
    public static final int FIELD_SMALL_BLIND = 2;
    public static final int FIELD_ANTE = 3;
    public static final int FIELD_BRING_IN = 4;

    public StakeSchema() {}


    public Stake newMessage() {
        return new Stake();
    }

    public Class<Stake> typeClass() {
        return Stake.class;
    }

    public String messageName() {
        return Stake.class.getSimpleName();
    }

    public String messageFullName() {
        return Stake.class.getName();
    }


    public boolean isInitialized(Stake message) {
        return true;
    }


    public void mergeFrom(Input input, Stake message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, Stake message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_BIG_BLIND:
                message.setBigBlind(input.readDouble());
                break;
            case FIELD_SMALL_BLIND:
                message.setSmallBlind(input.readDouble());
                break;
            case FIELD_ANTE:
                message.setAnte(input.readDouble());
                break;
            case FIELD_BRING_IN:
                message.setBringIn(input.readDouble());
                break;
            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_BIG_BLIND, FIELD_SMALL_BLIND, FIELD_ANTE, FIELD_BRING_IN };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, Stake message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, Stake message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_BIG_BLIND:
                output.writeDouble(FIELD_BIG_BLIND, message.getBigBlind(), false);
                break;
            case FIELD_SMALL_BLIND:
                if (message.getSmallBlind() != null)
                    output.writeDouble(FIELD_SMALL_BLIND, message.getSmallBlind(), false);
                break;
            case FIELD_ANTE:
                if (message.getAnte() != null)
                    output.writeDouble(FIELD_ANTE, message.getAnte(), false);
                break;
            case FIELD_BRING_IN:
                if (message.getBringIn() != null)
                    output.writeDouble(FIELD_BRING_IN, message.getBringIn(), false);
                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_BIG_BLIND: return "bigBlind";
            case FIELD_SMALL_BLIND: return "smallBlind";
            case FIELD_ANTE: return "ante";
            case FIELD_BRING_IN: return "bringIn";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("bigBlind", FIELD_BIG_BLIND);
        fieldMap.put("smallBlind", FIELD_SMALL_BLIND);
        fieldMap.put("ante", FIELD_ANTE);
        fieldMap.put("bringIn", FIELD_BRING_IN);
    }
}
