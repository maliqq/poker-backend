// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from wire.proto

package de.pokerno.protocol.wire;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public class SeatSchema
       implements Schema<Seat> {

    public enum SeatState implements com.dyuproject.protostuff.EnumLite<SeatState>
    {
        EMPTY(0),
        TAKEN(1),
        READY(2),
        WAIT_BB(3),
        POST_BB(4),
        PLAY(5),
        ALL_IN(6),
        BET(7),
        FOLD(8),
        AUTO(9),
        IDLE(10),
        AWAY(11);
        
        public final int number;
        
        private SeatState (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static SeatState valueOf(int number)
        {
            switch(number) 
            {
                case 0: return EMPTY;
                case 1: return TAKEN;
                case 2: return READY;
                case 3: return WAIT_BB;
                case 4: return POST_BB;
                case 5: return PLAY;
                case 6: return ALL_IN;
                case 7: return BET;
                case 8: return FOLD;
                case 9: return AUTO;
                case 10: return IDLE;
                case 11: return AWAY;
                default: return null;
            }
        }
    }


    static final Seat DEFAULT_INSTANCE = new Seat();
    static final Schema<Seat> SCHEMA = new SeatSchema();

    public static Seat getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<Seat> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_STATE = 1;
    public static final int FIELD_PLAYER = 2;
    public static final int FIELD_STACK_AMOUNT = 3;
    public static final int FIELD_PUT_AMOUNT = 4;

    public SeatSchema() {}


    public Seat newMessage() {
        return new Seat();
    }

    public Class<Seat> typeClass() {
        return Seat.class;
    }

    public String messageName() {
        return Seat.class.getSimpleName();
    }

    public String messageFullName() {
        return Seat.class.getName();
    }


    public boolean isInitialized(Seat message) {
        return true;
    }


    public void mergeFrom(Input input, Seat message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, Seat message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_STATE:
                message.setState(SeatState.valueOf(input.readEnum()));
                break;
            case FIELD_PLAYER:
                message.setPlayer(input.readString());
                break;
            case FIELD_STACK_AMOUNT:
                message.setStackAmount(input.readDouble());
                break;
            case FIELD_PUT_AMOUNT:
                message.setPutAmount(input.readDouble());
                break;
            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_STATE, FIELD_PLAYER, FIELD_STACK_AMOUNT, FIELD_PUT_AMOUNT };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, Seat message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, Seat message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_STATE:
                if (message.getState() != null)
                    output.writeEnum(FIELD_STATE, message.getState().number, false);
                break;
            case FIELD_PLAYER:
                if (message.getPlayer() != null)
                    output.writeString(FIELD_PLAYER, message.getPlayer(), false);
                break;
            case FIELD_STACK_AMOUNT:
                if (message.getStackAmount() != null)
                    output.writeDouble(FIELD_STACK_AMOUNT, message.getStackAmount(), false);
                break;
            case FIELD_PUT_AMOUNT:
                if (message.getPutAmount() != null)
                    output.writeDouble(FIELD_PUT_AMOUNT, message.getPutAmount(), false);
                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_STATE: return "state";
            case FIELD_PLAYER: return "player";
            case FIELD_STACK_AMOUNT: return "stackAmount";
            case FIELD_PUT_AMOUNT: return "putAmount";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("state", FIELD_STATE);
        fieldMap.put("player", FIELD_PLAYER);
        fieldMap.put("stackAmount", FIELD_STACK_AMOUNT);
        fieldMap.put("putAmount", FIELD_PUT_AMOUNT);
    }
}
