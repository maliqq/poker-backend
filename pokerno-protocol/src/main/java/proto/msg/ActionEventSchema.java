// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from msg.proto

package proto.msg;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class ActionEventSchema
       implements Schema<de.pokerno.protocol.msg.ActionEvent> {

    public enum EventType implements com.dyuproject.protostuff.EnumLite<EventType>
    {
        BET_ADD(1),
        CARDS_DISCARD(2),
        CARDS_SHOW(3);
        
        public final int number;
        
        private EventType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static EventType valueOf(int number)
        {
            switch(number) 
            {
                case 1: return BET_ADD;
                case 2: return CARDS_DISCARD;
                case 3: return CARDS_SHOW;
                default: return null;
            }
        }
    }


    static final de.pokerno.protocol.msg.ActionEvent DEFAULT_INSTANCE = new de.pokerno.protocol.msg.ActionEvent();
    static final Schema<de.pokerno.protocol.msg.ActionEvent> SCHEMA = new ActionEventSchema();

    public static de.pokerno.protocol.msg.ActionEvent getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<de.pokerno.protocol.msg.ActionEvent> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_TYPE = 1;
    public static final int FIELD_BET_ADD = 2;
    public static final int FIELD_CARDS_DISCARD = 3;
    public static final int FIELD_CARDS_SHOW = 4;

    public ActionEventSchema() {}


    public de.pokerno.protocol.msg.ActionEvent newMessage() {
        return new de.pokerno.protocol.msg.ActionEvent();
    }

    public Class<de.pokerno.protocol.msg.ActionEvent> typeClass() {
        return de.pokerno.protocol.msg.ActionEvent.class;
    }

    public String messageName() {
        return de.pokerno.protocol.msg.ActionEvent.class.getSimpleName();
    }

    public String messageFullName() {
        return de.pokerno.protocol.msg.ActionEvent.class.getName();
    }


    public boolean isInitialized(de.pokerno.protocol.msg.ActionEvent message) {
        return true;
    }


    public void mergeFrom(Input input, de.pokerno.protocol.msg.ActionEvent message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, de.pokerno.protocol.msg.ActionEvent message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_TYPE:
                message.setType(EventType.valueOf(input.readEnum()));
                break;
            case FIELD_BET_ADD:
                message.setBetAdd(input.mergeObject(message.getBetAdd(), BetAddSchema.getSchema()));
                break;

            case FIELD_CARDS_DISCARD:
                message.setCardsDiscard(input.mergeObject(message.getCardsDiscard(), CardsDiscardSchema.getSchema()));
                break;

            case FIELD_CARDS_SHOW:
                message.setCardsShow(input.mergeObject(message.getCardsShow(), CardsShowSchema.getSchema()));
                break;

            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_TYPE, FIELD_BET_ADD, FIELD_CARDS_DISCARD, FIELD_CARDS_SHOW };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, de.pokerno.protocol.msg.ActionEvent message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, de.pokerno.protocol.msg.ActionEvent message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_TYPE:
                output.writeEnum(FIELD_TYPE, message.getType().number, false);    break;
            case FIELD_BET_ADD:
                if (message.getBetAdd() != null)
                    output.writeObject(FIELD_BET_ADD, message.getBetAdd(), BetAddSchema.getSchema(), false);

                break;
            case FIELD_CARDS_DISCARD:
                if (message.getCardsDiscard() != null)
                    output.writeObject(FIELD_CARDS_DISCARD, message.getCardsDiscard(), CardsDiscardSchema.getSchema(), false);

                break;
            case FIELD_CARDS_SHOW:
                if (message.getCardsShow() != null)
                    output.writeObject(FIELD_CARDS_SHOW, message.getCardsShow(), CardsShowSchema.getSchema(), false);

                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_TYPE: return "type";
            case FIELD_BET_ADD: return "betAdd";
            case FIELD_CARDS_DISCARD: return "cardsDiscard";
            case FIELD_CARDS_SHOW: return "cardsShow";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("type", FIELD_TYPE);
        fieldMap.put("betAdd", FIELD_BET_ADD);
        fieldMap.put("cardsDiscard", FIELD_CARDS_DISCARD);
        fieldMap.put("cardsShow", FIELD_CARDS_SHOW);
    }
}
