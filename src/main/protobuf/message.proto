package de.pokerno.proto;

option optimize_for = SPEED;

enum MsgType {
  Error = 1;
  Chat = 2;
  Dealer = 3;
}

message Msg {
  required MsgType Type = 1;
  required string Body = 2;
}

// Seat event
message Seat {
  
  enum SeatState {
    Empty = 0;
    Taken = 1;
    Ready = 2;

    WaitBB = 3;
    PostBB = 4;

    Playing = 5;
    AllIn = 7;
    Auto = 9;

    Idle = 10;
    Away = 11;
  }

  optional SeatState State = 1;
  optional string Player = 2;
  optional double StackAmount = 3;
  optional double PutAmount = 4;
}

message Table {
  required int32 Size = 2;
  required int32 Button = 3;
  repeated Seat Seats = 4;
}

message SeatEvent {
  enum SeatEventType {
    PlayerChange = 1;
    StateChange = 2;
    StackAmountChange = 3;
    PutAmountChange = 4;
  }
  required SeatEventType Type = 1;
  required int32 Pos = 2;
  required Seat Seat = 3;
}

// Action

message Range {
  required double Min = 1;
  required double Max = 2;
}

message Bet {
  enum BetType {
    Ante = 1;
    BringIn = 2;
    SmallBlind = 3;
    BigBlind = 4;
    GuestBlind = 5;
    Straddle = 6;

    Raise = 7;
    Call = 8;
    Check = 9;
    Fold = 10;

    Discard = 11;
    StandPat = 12;

    Show = 13;
    Muck = 14;
  }

  required BetType Type = 1;
  optional double Amount = 2;
}

message ActionEvent {
  enum ActionEventType {
    DiscardCards = 2;
    ShowCards = 3;
    AddBet = 4;
  }
  required ActionEventType Type = 1;

  optional int32 Pos = 2;
  optional string Player = 3;

  optional bytes Cards = 4;
  optional int32 CardsNum = 5;

  optional Bet Bet = 6;
  optional double Amount = 7;
}

// Table event
message TableEvent {
  enum TableEventType {
    ButtonChange = 1;
    TableStateChange = 2;
  }
  enum TableState {
    Active = 1;
  }
  required TableEventType Type = 1;
  optional int32 Button = 2;
  optional TableState State = 3;
}

// Gameplay event

message Game {
  enum GameType {
    Texas = 0;
    Omaha = 1;
    Omaha8 = 2;

    Stud = 3;
    Stud8 = 4;
    Razz = 9;
    London = 10;

    FiveCard = 11;
    Single27 = 12;
    Triple27 = 13;

    Badugi = 14;
  }

  enum GameLimit {
    NoLimit = 0;
    PotLimit = 1;
    FixedLimit = 2;
  }
  required GameType Type = 1;
  required GameLimit Limit = 2;
  required int32 TableSize = 3;
}

message Stake {
  required double BigBlind = 1;
  optional double SmallBlind = 2;
  optional double Ante = 3;
  optional double BringIn = 4;
}

message GameplayEvent {
  enum GameplayEventType {
    GameChange = 1;
    StakeChange = 2;
  }
  required GameplayEventType Type = 1;
  optional Game Game = 2;
  optional Stake Stake = 3;
}

// Stage event
message StageEvent {
  enum StageEventType {
    Start = 1;
    Stop = 2;
  }

  enum StageType { // stages hierarchy
    Play = 1;
    Street = 2;
  }
  required StageEventType Type = 1;
  required StageType Stage = 2;
}

// Deal event
message DealCards {
  enum DealType {
    Board = 1;
    Hole = 2;
    Door = 3;
  }

  required DealType Type = 1;
  optional int32 Pos = 2;
  optional string Player = 3;
  repeated bytes Cards = 4;
  optional int32 CardsNum = 5;
}

message RequireBet {
  required int32 Pos = 1;
  required string Player = 2;
  required double Call = 3;
  required Range Raise = 4;
}

message RequireDiscard {
  required int32 Pos = 1;
  required string Player = 2;
}

message DeclarePot {
  required double Pot = 1;
  optional double Rake = 2;
}

message DeclareWinner {
  required int32 Pos = 1;
  required string Player = 2;
  required double Amount = 3; 
}

message Hand {
  enum RankType {
    StraightFlush = 0;
    FourKind = 1;
    FullHouse = 2;
    Flush = 3;
    Straight = 4;
    ThreeKind = 5;
    TwoPair = 6;
    OnePair = 7;
    HighCard = 8;

    BadugiFour = 9;
    BadugiThree = 10;
    BadugiTwo = 11;
    BadugiOne = 12;

    CompleteLow = 13;
    IncompleteLow = 14;
  }
  required RankType Rank = 1;
  required bytes Value = 2;
  optional bytes High = 3;
  optional bytes Kicker = 4;
  optional string String = 5;
}

message DeclareHand {
  required int32 Pos = 1;
  required string Player = 2;
  required Hand Hand = 3;
}

message DealEvent {
  enum DealEventType {
    AskBet = 1;
    AskDiscard = 2;
    ShowPot = 3;
    ShowWinner = 4;
    ShowHand = 5;
  }
  required DealEventType Type = 1;
  optional RequireBet RequireBet = 2;
  optional RequireDiscard RequireDiscard = 3;
  optional DeclarePot Pot = 4;
  optional DeclareWinner Winner = 5;
}

message JoinTable {
  required int32 Pos = 1;
  required double Amount = 3;
}

enum CmdType {
  Join = 1;
  Leave = 2;
  SitOut = 3;
  ComeBack = 4;
  Act = 5;
}

message Cmd {
  required CmdType Type = 1;
  optional JoinTable Join = 2;
  optional ActionEvent Act = 3;
}

message Event {
  optional SeatEvent SeatEvent = 1;
  optional ActionEvent ActionEvent = 2;
  optional TableEvent TableEvent = 3;
  optional GameplayEvent GameplayEvent = 4;
  optional StageEvent StageEvent = 5;
}
