package de.pokerno.backend.protocol;

option java_schema_field_accessors = true;

enum MsgType {
  ERROR = 1;
  CHAT = 2;
  DEALER = 3;
}

message Msg {
  required MsgType Type = 1;
  required string Body = 2;
}

// Seat event
enum SeatState {
  EMPTY = 0;
  TAKEN = 1;
  READY = 2;

  WAIT_BB = 3;
  POST_BB = 4;

  PLAY = 5;
  ALL_IN = 7;
  AUTO = 9;

  IDLE = 10;
  AWAY = 11;
}

message Seat {
  optional SeatState State = 1;
  optional string Player = 2;
  optional double StackAmount = 3;
  optional double PutAmount = 4;
}

message Table {
  required int32 Size = 2;
  required int32 Button = 3;
  repeated Seat Seats = 4;
}

enum SeatEventType {
  PLAYER = 1;
  STATE = 2;
  STACK_AMOUNT = 3;
  PUT_AMOUNT = 4;
}

message SeatEvent {
  required SeatEventType Type = 1;
  required int32 Pos = 2;
  required Seat Seat = 3;
}

// Action

message Range {
  required double Min = 1;
  required double Max = 2;
}

enum BetType {
  ANTE = 1;
  BRING_IN = 2;
  SB = 3;
  BB = 4;
  GUEST_BLIND = 5;
  STRADDLE = 6;

  RAISE = 7;
  CALL = 8;
  CHECK = 9;
  FOLD = 10;

  DISCARD = 11;
  STAND_PAT = 12;

  SHOW = 13;
  MUCK = 14;
}

message Bet {
  required BetType Type = 1;
  optional double Amount = 2;
}

enum ActionEventType {
  DISCARD_CARDS = 2;
  SHOW_CARDS = 3;
  ADD_BET = 4;
}

message ActionEvent {
  required ActionEventType Type = 1;

  optional int32 Pos = 2;
  optional string Player = 3;

  optional bytes Cards = 4;
  optional int32 CardsNum = 5;

  optional Bet Bet = 6;
  optional double Amount = 7;
}

// Table event
enum TableEventType {
  BUTTON = 1;
  STATE = 2;
}

enum TableState {
  ACTIVE = 1;
}

message TableEvent {
  required TableEventType Type = 1;
  optional int32 Button = 2;
  optional TableState State = 3;
}

// Gameplay event
enum GameType {
  TEXAS = 0;
  OMAHA = 1;
  OMAHA_8 = 2;

  STUD = 3;
  STUD_8 = 4;
  RAZZ = 9;
  LONDON = 10;

  FIVE_CARD = 11;
  SINGLE_27 = 12;
  TRIPLE_27 = 13;

  BADUGI = 14;
}

enum GameLimit {
  NL = 0;
  PL = 1;
  FL = 2;
}

message Game {
  required GameType Type = 1;
  required GameLimit Limit = 2;
  required int32 TableSize = 3;
}

message Stake {
  required double BigBlind = 1;
  optional double SmallBlind = 2;
  optional double Ante = 3;
  optional double BringIn = 4;
}

enum GameplayEventType {
  GAME = 1;
  STAKE = 2;
}

message GameplayEvent {
  required GameplayEventType Type = 1;
  optional Game Game = 2;
  optional Stake Stake = 3;
}

// Stage event
enum StageEventType {
  START = 1;
  STOP = 2;
}

enum StageType { // stages hierarchy
  PLAY = 1;
  STREET = 2;
}

message StageEvent {
  required StageEventType Type = 1;
  required StageType Stage = 2;
}

// Deal event
enum DealerDealType {
  BOARD = 1;
  HOLE = 2;
  DOOR = 3;
}

message DealCards {
  required DealerDealType DealType = 1;
  optional bytes Cards = 2;
  optional int32 Pos = 3;
  optional string Player = 4;
  optional int32 CardsNum = 5;
}

message RequireBet {
  required int32 Pos = 1;
  required string Player = 2;
  required double Call = 3;
  required Range Raise = 4;
}

message RequireDiscard {
  required int32 Pos = 1;
  required string Player = 2;
}

message DeclarePot {
  required double Pot = 1;
  optional double Rake = 2;
}

message DeclareWinner {
  required int32 Pos = 1;
  required string Player = 2;
  required double Amount = 3; 
}

enum RankType {
  STRAIGHT_FLUSH = 0;
  FOUR_KIND = 1;
  FULL_HOUSE = 2;
  FLUSH = 3;
  STRAIGHT = 4;
  THREE_KIND = 5;
  TWO_PAIR = 6;
  ONE_PAIR = 7;
  HIGH_CARD = 8;

  BADUGI4 = 9;
  BADUGI3 = 10;
  BADUGI2 = 11;
  BADUGI1 = 12;

  LOW = 13;
  NOT_LOW = 14;
}

message Hand {
  required RankType Rank = 1;
  required bytes Value = 2;
  optional bytes High = 3;
  optional bytes Kicker = 4;
  optional string String = 5;
}

message DeclareHand {
  required int32 Pos = 1;
  required string Player = 2;
  required Hand Hand = 3;
}

enum DealEventType {
  DEAL_CARDS = 1;
  REQUIRE_BET = 2;
  REQUIRE_DISCARD = 3;
  DECLARE_POT = 4;
  DECLARE_WINNER = 5;
  DECLARE_HAND = 6;
}

message DealEvent {
  required DealEventType Type = 1;
  optional RequireBet RequireBet = 2;
  optional RequireDiscard RequireDiscard = 3;
  optional DeclarePot DeclarePot = 4;
  optional DeclareWinner DeclareWinner = 5;
}

message JoinTable {
  required int32 Pos = 1;
  required double Amount = 3;
}

enum CmdType {
  JOIN_TABLE = 1;
  LEAVE_TABLE = 2;
  SIT_OUT = 3;
  COME_BACK = 4;
  ACTION = 5;
}

message Cmd {
  required CmdType Type = 1;
  optional JoinTable JoinTable = 2;
  optional ActionEvent ActionEvent = 3;
}

enum EventType {
  SEAT = 1;
  ACTION = 2;
  TABLE = 3;
  GAMEPLAY = 4;
  STAGE = 5;
}

message Event {
  required EventType Type = 1;
  optional SeatEvent SeatEvent = 2;
  optional ActionEvent ActionEvent = 3;
  optional TableEvent TableEvent = 4;
  optional GameplayEvent GameplayEvent = 5;
  optional StageEvent StageEvent = 6;
}
