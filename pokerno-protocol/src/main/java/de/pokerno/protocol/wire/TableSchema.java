// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from wire.proto

package de.pokerno.protocol.wire;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class TableSchema
       implements Schema<Table> {

    public enum TableState implements com.dyuproject.protostuff.EnumLite<TableState>
    {
        WAITING(1),
        ACTIVE(2),
        PAUSED(3),
        CLOSED(4);
        
        public final int number;
        
        private TableState (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static TableState valueOf(int number)
        {
            switch(number) 
            {
                case 1: return WAITING;
                case 2: return ACTIVE;
                case 3: return PAUSED;
                case 4: return CLOSED;
                default: return null;
            }
        }
    }


    static final Table DEFAULT_INSTANCE = new Table();
    static final Schema<Table> SCHEMA = new TableSchema();

    public static Table getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<Table> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_SIZE = 2;
    public static final int FIELD_BUTTON = 3;
    public static final int FIELD_SEATS = 4;
    public static final int FIELD_STATE = 5;

    public TableSchema() {}


    public Table newMessage() {
        return new Table();
    }

    public Class<Table> typeClass() {
        return Table.class;
    }

    public String messageName() {
        return Table.class.getSimpleName();
    }

    public String messageFullName() {
        return Table.class.getName();
    }


    public boolean isInitialized(Table message) {
        return true;
    }


    public void mergeFrom(Input input, Table message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, Table message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_SIZE:
                message.setSize(input.readInt32());
                break;
            case FIELD_BUTTON:
                message.setButton(input.readInt32());
                break;
            case FIELD_SEATS:
                if (message.getSeats() == null)
                    message.setSeats(new ArrayList<Seat>());
                message.getSeats().add(input.mergeObject(null, SeatSchema.getSchema()));
                break;

            case FIELD_STATE:
                message.setState(TableState.valueOf(input.readEnum()));
                break;
            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_SIZE, FIELD_BUTTON, FIELD_SEATS, FIELD_STATE };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, Table message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, Table message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_SIZE:
                output.writeInt32(FIELD_SIZE, message.getSize(), false);
                break;
            case FIELD_BUTTON:
                output.writeInt32(FIELD_BUTTON, message.getButton(), false);
                break;
            case FIELD_SEATS:
                if (message.getSeats() != null) {
                    for (Seat seatsEntry : message.getSeats()) {
                        if (seatsEntry != null)
                            output.writeObject(FIELD_SEATS, seatsEntry, SeatSchema.getSchema(), true);
                    }
                }

                break;
            case FIELD_STATE:
                if (message.getState() != null)
                    output.writeEnum(FIELD_STATE, message.getState().number, false);
                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_SIZE: return "size";
            case FIELD_BUTTON: return "button";
            case FIELD_SEATS: return "seats";
            case FIELD_STATE: return "state";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("size", FIELD_SIZE);
        fieldMap.put("button", FIELD_BUTTON);
        fieldMap.put("seats", FIELD_SEATS);
        fieldMap.put("state", FIELD_STATE);
    }
}
