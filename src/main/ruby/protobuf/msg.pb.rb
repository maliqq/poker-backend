#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

begin; require 'src/main/protobuf/wire.pb'; rescue LoadError; end

module De
  module Pokerno
    module Protocol
      module Msg
        # forward declarations
        class Msg < ::ProtocolBuffers::Message; end
        class SeatEvent < ::ProtocolBuffers::Message; end
        class AddBet < ::ProtocolBuffers::Message; end
        class DiscardCards < ::ProtocolBuffers::Message; end
        class ShowCards < ::ProtocolBuffers::Message; end
        class BetAdd < ::ProtocolBuffers::Message; end
        class CardsDiscard < ::ProtocolBuffers::Message; end
        class CardsShow < ::ProtocolBuffers::Message; end
        class ActionEvent < ::ProtocolBuffers::Message; end
        class TableEvent < ::ProtocolBuffers::Message; end
        class GameplayEvent < ::ProtocolBuffers::Message; end
        class StageEvent < ::ProtocolBuffers::Message; end
        class DealCards < ::ProtocolBuffers::Message; end
        class RequireBet < ::ProtocolBuffers::Message; end
        class RequireDiscard < ::ProtocolBuffers::Message; end
        class DeclarePot < ::ProtocolBuffers::Message; end
        class DeclareWinner < ::ProtocolBuffers::Message; end
        class DeclareHand < ::ProtocolBuffers::Message; end
        class TickTimer < ::ProtocolBuffers::Message; end
        class DealEvent < ::ProtocolBuffers::Message; end
        class PlayerJoin < ::ProtocolBuffers::Message; end
        class JoinTable < ::ProtocolBuffers::Message; end
        class Cmd < ::ProtocolBuffers::Message; end
        class Evt < ::ProtocolBuffers::Message; end
        class Start < ::ProtocolBuffers::Message; end
        class Play < ::ProtocolBuffers::Message; end

        class Msg < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module MsgType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.Msg.MsgType"

            ERROR = 1
            CHAT = 2
            DEALER = 3
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.Msg"

          required ::De::Pokerno::Protocol::Msg::Msg::MsgType, :Type, 1
          required :string, :Body, 2
        end

        class SeatEvent < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module EventType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.SeatEvent.EventType"

            PLAYER = 1
            STATE = 2
            STACK_AMOUNT = 3
            PUT_AMOUNT = 4
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.SeatEvent"

          required ::De::Pokerno::Protocol::Msg::SeatEvent::EventType, :Type, 1
          required :int32, :Pos, 2
          required ::De::Pokerno::Protocol::Wire::Seat, :Seat, 3
        end

        class AddBet < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.AddBet"

          required ::De::Pokerno::Protocol::Wire::Bet, :Bet, 1
        end

        class DiscardCards < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module DiscardType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.DiscardCards.DiscardType"

            DISCARD = 1
            STAND_PAT = 2
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.DiscardCards"

          required ::De::Pokerno::Protocol::Msg::DiscardCards::DiscardType, :Type, 1
          required :bytes, :Cards, 4
        end

        class ShowCards < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module ShowType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.ShowCards.ShowType"

            SHOW = 1
            MUCK = 2
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.ShowCards"

          required ::De::Pokerno::Protocol::Msg::ShowCards::ShowType, :Type, 1
          optional :bytes, :Cards, 4
        end

        class BetAdd < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.BetAdd"

          required :int32, :Pos, 1
          required :string, :Player, 2
          required ::De::Pokerno::Protocol::Wire::Bet, :Bet, 3
        end

        class CardsDiscard < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.CardsDiscard"

          required :int32, :Pos, 1
          required :string, :Player, 2
          required :int32, :CardsNum, 3
        end

        class CardsShow < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.CardsShow"

          required :int32, :Pos, 1
          required :string, :Player, 2
          required :bytes, :Cards, 3
          optional :bool, :Muck, 4
        end

        class ActionEvent < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module EventType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.ActionEvent.EventType"

            BET_ADD = 1
            CARDS_DISCARD = 2
            CARDS_SHOW = 3
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.ActionEvent"

          required ::De::Pokerno::Protocol::Msg::ActionEvent::EventType, :Type, 1
          optional ::De::Pokerno::Protocol::Msg::BetAdd, :BetAdd, 2
          optional ::De::Pokerno::Protocol::Msg::CardsDiscard, :CardsDiscard, 3
          optional ::De::Pokerno::Protocol::Msg::CardsShow, :CardsShow, 4
        end

        class TableEvent < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module EventType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.TableEvent.EventType"

            BUTTON = 1
            STATE = 2
          end

          module TableState
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.TableEvent.TableState"

            ACTIVE = 1
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.TableEvent"

          required ::De::Pokerno::Protocol::Msg::TableEvent::EventType, :Type, 1
          optional :int32, :Button, 2
          optional ::De::Pokerno::Protocol::Msg::TableEvent::TableState, :State, 3
        end

        class GameplayEvent < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module EventType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.GameplayEvent.EventType"

            GAME = 1
            STAKE = 2
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.GameplayEvent"

          required ::De::Pokerno::Protocol::Msg::GameplayEvent::EventType, :Type, 1
          optional ::De::Pokerno::Protocol::Wire::Game, :Game, 2
          optional ::De::Pokerno::Protocol::Wire::Stake, :Stake, 3
        end

        class StageEvent < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module EventType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.StageEvent.EventType"

            START = 1
            STOP = 2
          end

          module StageType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.StageEvent.StageType"

            PLAY = 1
            STREET = 2
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.StageEvent"

          required ::De::Pokerno::Protocol::Msg::StageEvent::EventType, :Type, 1
          required ::De::Pokerno::Protocol::Msg::StageEvent::StageType, :Stage, 2
          optional ::De::Pokerno::Protocol::Wire::StreetType, :Street, 3
        end

        class DealCards < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.DealCards"

          required ::De::Pokerno::Protocol::Wire::DealType, :Type, 1
          optional :bytes, :Cards, 2
          optional :int32, :Pos, 3
          optional :string, :Player, 4
          optional :int32, :CardsNum, 5
        end

        class RequireBet < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.RequireBet"

          required :int32, :Pos, 1
          required :string, :Player, 2
          required :double, :Call, 3
          required ::De::Pokerno::Protocol::Wire::Range, :Raise, 4
        end

        class RequireDiscard < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.RequireDiscard"

          required :int32, :Pos, 1
          required :string, :Player, 2
        end

        class DeclarePot < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.DeclarePot"

          required :double, :Pot, 1
          repeated :double, :Side, 2
          optional :double, :Rake, 3
        end

        class DeclareWinner < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.DeclareWinner"

          required :int32, :Pos, 1
          required :string, :Player, 2
          required :double, :Amount, 3
        end

        class DeclareHand < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.DeclareHand"

          required :int32, :Pos, 1
          required :string, :Player, 2
          required ::De::Pokerno::Protocol::Wire::Hand, :Hand, 3
          optional :bytes, :Cards, 4
        end

        class TickTimer < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.TickTimer"

          required :int32, :Pos, 1
          required :string, :Player, 2
          required :int32, :TimeLeft, 3
          optional :bool, :TimeBank, 4
        end

        class DealEvent < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module EventType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.DealEvent.EventType"

            DEAL_CARDS = 1
            REQUIRE_BET = 2
            REQUIRE_DISCARD = 3
            DECLARE_POT = 4
            DECLARE_HAND = 5
            DECLARE_WINNER = 6
            TICK_TIMER = 7
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.DealEvent"

          required ::De::Pokerno::Protocol::Msg::DealEvent::EventType, :Type, 1
          optional ::De::Pokerno::Protocol::Msg::DealCards, :DealCards, 2
          optional ::De::Pokerno::Protocol::Msg::RequireBet, :RequireBet, 3
          optional ::De::Pokerno::Protocol::Msg::RequireDiscard, :RequireDiscard, 4
          optional ::De::Pokerno::Protocol::Msg::DeclarePot, :DeclarePot, 5
          optional ::De::Pokerno::Protocol::Msg::DeclareHand, :DeclareHand, 6
          optional ::De::Pokerno::Protocol::Msg::DeclareWinner, :DeclareWinner, 7
          optional ::De::Pokerno::Protocol::Msg::TickTimer, :TickTimer, 8
        end

        class PlayerJoin < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.PlayerJoin"

          required :int32, :Pos, 1
          required :string, :Player, 2
          required :double, :Amount, 3
        end

        class JoinTable < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.JoinTable"

          required :int32, :Pos, 1
          required :double, :Amount, 3
        end

        class Cmd < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module CmdType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.Cmd.CmdType"

            JOIN_TABLE = 1
            LEAVE_TABLE = 2
            SIT_OUT = 3
            COME_BACK = 4
            ACTION = 5
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.Cmd"

          required ::De::Pokerno::Protocol::Msg::Cmd::CmdType, :Type, 1
          optional ::De::Pokerno::Protocol::Msg::JoinTable, :JoinTable, 2
          optional ::De::Pokerno::Protocol::Msg::ActionEvent, :ActionEvent, 3
        end

        class Evt < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module EventType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.msg.Evt.EventType"

            SEAT = 1
            ACTION = 2
            TABLE = 3
            GAMEPLAY = 4
            STAGE = 5
          end

          set_fully_qualified_name "de.pokerno.protocol.msg.Evt"

          required ::De::Pokerno::Protocol::Msg::Evt::EventType, :Type, 1
          optional ::De::Pokerno::Protocol::Msg::SeatEvent, :SeatEvent, 2
          optional ::De::Pokerno::Protocol::Msg::ActionEvent, :ActionEvent, 3
          optional ::De::Pokerno::Protocol::Msg::TableEvent, :TableEvent, 4
          optional ::De::Pokerno::Protocol::Msg::GameplayEvent, :GameplayEvent, 5
          optional ::De::Pokerno::Protocol::Msg::StageEvent, :StageEvent, 6
        end

        class Start < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.Start"

          required ::De::Pokerno::Protocol::Wire::Table, :Table, 1
          required ::De::Pokerno::Protocol::Wire::Variation, :Variation, 2
          required ::De::Pokerno::Protocol::Wire::Stake, :Stake, 3
          required ::De::Pokerno::Protocol::Msg::Play, :Play, 4
        end

        class Play < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.msg.Play"

          required :string, :Id, 1
          required :int64, :StartAt, 2
          optional :int64, :StopAt, 3
          required ::De::Pokerno::Protocol::Wire::StreetType, :Street, 4
          optional ::De::Pokerno::Protocol::Msg::RequireBet, :Acting, 5
          optional :double, :Pot, 6
          optional :double, :Rake, 7
          repeated ::De::Pokerno::Protocol::Msg::DeclareWinner, :Winners, 8
          repeated ::De::Pokerno::Protocol::Msg::CardsShow, :KnownCards, 9
        end

      end
    end
  end
end
