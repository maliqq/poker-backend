// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from msg.proto

package proto.msg;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class PlaySchema
       implements Schema<de.pokerno.protocol.msg.Play> {


    static final de.pokerno.protocol.msg.Play DEFAULT_INSTANCE = new de.pokerno.protocol.msg.Play();
    static final Schema<de.pokerno.protocol.msg.Play> SCHEMA = new PlaySchema();

    public static de.pokerno.protocol.msg.Play getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<de.pokerno.protocol.msg.Play> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_ID = 1;
    public static final int FIELD_START_AT = 2;
    public static final int FIELD_STOP_AT = 3;
    public static final int FIELD_STREET = 4;
    public static final int FIELD_ACTING = 5;
    public static final int FIELD_POT = 6;
    public static final int FIELD_RAKE = 7;
    public static final int FIELD_WINNERS = 8;
    public static final int FIELD_KNOWN_CARDS = 9;

    public PlaySchema() {}


    public de.pokerno.protocol.msg.Play newMessage() {
        return new de.pokerno.protocol.msg.Play();
    }

    public Class<de.pokerno.protocol.msg.Play> typeClass() {
        return de.pokerno.protocol.msg.Play.class;
    }

    public String messageName() {
        return de.pokerno.protocol.msg.Play.class.getSimpleName();
    }

    public String messageFullName() {
        return de.pokerno.protocol.msg.Play.class.getName();
    }


    public boolean isInitialized(de.pokerno.protocol.msg.Play message) {
        return true;
    }


    public void mergeFrom(Input input, de.pokerno.protocol.msg.Play message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, de.pokerno.protocol.msg.Play message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_ID:
                message.setId(input.readString());
                break;
            case FIELD_START_AT:
                message.setStartAt(input.readInt64());
                break;
            case FIELD_STOP_AT:
                message.setStopAt(input.readInt64());
                break;
            case FIELD_STREET:
                message.setStreet(proto.wire.StreetType.valueOf(input.readEnum()));
                break;
            case FIELD_ACTING:
                message.setActing(input.mergeObject(message.getActing(), RequireBetSchema.getSchema()));
                break;

            case FIELD_POT:
                message.setPot(input.readDouble());
                break;
            case FIELD_RAKE:
                message.setRake(input.readDouble());
                break;
            case FIELD_WINNERS:
                if (message.getWinners() == null)
                    message.setWinners(new ArrayList<de.pokerno.protocol.msg.DeclareWinner>());
                message.getWinners().add(input.mergeObject(null, DeclareWinnerSchema.getSchema()));
                break;

            case FIELD_KNOWN_CARDS:
                if (message.getKnownCards() == null)
                    message.setKnownCards(new ArrayList<de.pokerno.protocol.msg.CardsShow>());
                message.getKnownCards().add(input.mergeObject(null, CardsShowSchema.getSchema()));
                break;

            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_ID, FIELD_START_AT, FIELD_STOP_AT, FIELD_STREET, FIELD_ACTING, FIELD_POT, FIELD_RAKE, FIELD_WINNERS, FIELD_KNOWN_CARDS };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, de.pokerno.protocol.msg.Play message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, de.pokerno.protocol.msg.Play message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_ID:
                output.writeString(FIELD_ID, message.getId(), false);
                break;
            case FIELD_START_AT:
                output.writeInt64(FIELD_START_AT, message.getStartAt(), false);
                break;
            case FIELD_STOP_AT:
                if (message.getStopAt() != null)
                    output.writeInt64(FIELD_STOP_AT, message.getStopAt(), false);
                break;
            case FIELD_STREET:
                output.writeEnum(FIELD_STREET, message.getStreet().number, false);    break;
            case FIELD_ACTING:
                if (message.getActing() != null)
                    output.writeObject(FIELD_ACTING, message.getActing(), RequireBetSchema.getSchema(), false);

                break;
            case FIELD_POT:
                if (message.getPot() != null)
                    output.writeDouble(FIELD_POT, message.getPot(), false);
                break;
            case FIELD_RAKE:
                if (message.getRake() != null)
                    output.writeDouble(FIELD_RAKE, message.getRake(), false);
                break;
            case FIELD_WINNERS:
                if (message.getWinners() != null) {
                    for (de.pokerno.protocol.msg.DeclareWinner winnersEntry : message.getWinners()) {
                        if (winnersEntry != null)
                            output.writeObject(FIELD_WINNERS, winnersEntry, DeclareWinnerSchema.getSchema(), true);
                    }
                }

                break;
            case FIELD_KNOWN_CARDS:
                if (message.getKnownCards() != null) {
                    for (de.pokerno.protocol.msg.CardsShow knownCardsEntry : message.getKnownCards()) {
                        if (knownCardsEntry != null)
                            output.writeObject(FIELD_KNOWN_CARDS, knownCardsEntry, CardsShowSchema.getSchema(), true);
                    }
                }

                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_ID: return "id";
            case FIELD_START_AT: return "startAt";
            case FIELD_STOP_AT: return "stopAt";
            case FIELD_STREET: return "street";
            case FIELD_ACTING: return "acting";
            case FIELD_POT: return "pot";
            case FIELD_RAKE: return "rake";
            case FIELD_WINNERS: return "winners";
            case FIELD_KNOWN_CARDS: return "knownCards";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("id", FIELD_ID);
        fieldMap.put("startAt", FIELD_START_AT);
        fieldMap.put("stopAt", FIELD_STOP_AT);
        fieldMap.put("street", FIELD_STREET);
        fieldMap.put("acting", FIELD_ACTING);
        fieldMap.put("pot", FIELD_POT);
        fieldMap.put("rake", FIELD_RAKE);
        fieldMap.put("winners", FIELD_WINNERS);
        fieldMap.put("knownCards", FIELD_KNOWN_CARDS);
    }
}
