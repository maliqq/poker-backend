// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from rpc.proto

package de.pokerno.protocol.rpc;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class RequestSchema
       implements Schema<Request> {

    public enum RequestType implements com.dyuproject.protostuff.EnumLite<RequestType>
    {
        NODE_ACTION(1),
        ROOM_ACTION(2),
        TABLE_ACTION(3),
        DEAL_ACTION(4);
        
        public final int number;
        
        private RequestType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static RequestType valueOf(int number)
        {
            switch(number) 
            {
                case 1: return NODE_ACTION;
                case 2: return ROOM_ACTION;
                case 3: return TABLE_ACTION;
                case 4: return DEAL_ACTION;
                default: return null;
            }
        }
    }


    static final Request DEFAULT_INSTANCE = new Request();
    static final Schema<Request> SCHEMA = new RequestSchema();

    public static Request getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<Request> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_TYPE = 1;
    public static final int FIELD_NODE_ACTION = 2;
    public static final int FIELD_ROOM_ACTION = 3;
    public static final int FIELD_TABLE_ACTION = 4;
    public static final int FIELD_DEAL_ACTION = 5;

    public RequestSchema() {}


    public Request newMessage() {
        return new Request();
    }

    public Class<Request> typeClass() {
        return Request.class;
    }

    public String messageName() {
        return Request.class.getSimpleName();
    }

    public String messageFullName() {
        return Request.class.getName();
    }


    public boolean isInitialized(Request message) {
        return true;
    }


    public void mergeFrom(Input input, Request message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, Request message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_TYPE:
                message.setType(RequestType.valueOf(input.readEnum()));
                break;
            case FIELD_NODE_ACTION:
                message.setNodeAction(input.mergeObject(message.getNodeAction(), NodeActionSchema.getSchema()));
                break;

            case FIELD_ROOM_ACTION:
                message.setRoomAction(input.mergeObject(message.getRoomAction(), RoomActionSchema.getSchema()));
                break;

            case FIELD_TABLE_ACTION:
                message.setTableAction(input.mergeObject(message.getTableAction(), TableActionSchema.getSchema()));
                break;

            case FIELD_DEAL_ACTION:
                message.setDealAction(input.mergeObject(message.getDealAction(), DealActionSchema.getSchema()));
                break;

            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_TYPE, FIELD_NODE_ACTION, FIELD_ROOM_ACTION, FIELD_TABLE_ACTION, FIELD_DEAL_ACTION };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, Request message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, Request message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_TYPE:
                output.writeEnum(FIELD_TYPE, message.getType().number, false);    break;
            case FIELD_NODE_ACTION:
                if (message.getNodeAction() != null)
                    output.writeObject(FIELD_NODE_ACTION, message.getNodeAction(), NodeActionSchema.getSchema(), false);

                break;
            case FIELD_ROOM_ACTION:
                if (message.getRoomAction() != null)
                    output.writeObject(FIELD_ROOM_ACTION, message.getRoomAction(), RoomActionSchema.getSchema(), false);

                break;
            case FIELD_TABLE_ACTION:
                if (message.getTableAction() != null)
                    output.writeObject(FIELD_TABLE_ACTION, message.getTableAction(), TableActionSchema.getSchema(), false);

                break;
            case FIELD_DEAL_ACTION:
                if (message.getDealAction() != null)
                    output.writeObject(FIELD_DEAL_ACTION, message.getDealAction(), DealActionSchema.getSchema(), false);

                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_TYPE: return "type";
            case FIELD_NODE_ACTION: return "nodeAction";
            case FIELD_ROOM_ACTION: return "roomAction";
            case FIELD_TABLE_ACTION: return "tableAction";
            case FIELD_DEAL_ACTION: return "dealAction";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("type", FIELD_TYPE);
        fieldMap.put("nodeAction", FIELD_NODE_ACTION);
        fieldMap.put("roomAction", FIELD_ROOM_ACTION);
        fieldMap.put("tableAction", FIELD_TABLE_ACTION);
        fieldMap.put("dealAction", FIELD_DEAL_ACTION);
    }
}
