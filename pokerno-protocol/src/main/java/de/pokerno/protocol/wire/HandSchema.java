// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from wire.proto

package de.pokerno.protocol.wire;

import java.io.IOException;

import com.dyuproject.protostuff.ByteString;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class HandSchema
       implements Schema<Hand> {

    public enum RankType implements com.dyuproject.protostuff.EnumLite<RankType>
    {
        HIGH_CARD(0),
        ONE_PAIR(1),
        TWO_PAIR(2),
        THREE_KIND(3),
        STRAIGHT(4),
        FLUSH(5),
        FULL_HOUSE(6),
        FOUR_KIND(7),
        STRAIGHT_FLUSH(8),
        BADUGI1(9),
        BADUGI2(10),
        BADUGI3(11),
        BADUGI4(12),
        NOT_LOW(13),
        LOW(14);
        
        public final int number;
        
        private RankType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static RankType valueOf(int number)
        {
            switch(number) 
            {
                case 0: return HIGH_CARD;
                case 1: return ONE_PAIR;
                case 2: return TWO_PAIR;
                case 3: return THREE_KIND;
                case 4: return STRAIGHT;
                case 5: return FLUSH;
                case 6: return FULL_HOUSE;
                case 7: return FOUR_KIND;
                case 8: return STRAIGHT_FLUSH;
                case 9: return BADUGI1;
                case 10: return BADUGI2;
                case 11: return BADUGI3;
                case 12: return BADUGI4;
                case 13: return NOT_LOW;
                case 14: return LOW;
                default: return null;
            }
        }
    }


    static final Hand DEFAULT_INSTANCE = new Hand();
    static final Schema<Hand> SCHEMA = new HandSchema();

    public static Hand getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<Hand> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_RANK = 1;
    public static final int FIELD_CARDS = 2;
    public static final int FIELD_VALUE = 3;
    public static final int FIELD_HIGH = 4;
    public static final int FIELD_KICKER = 5;
    public static final int FIELD_STRING = 6;

    public HandSchema() {}


    public Hand newMessage() {
        return new Hand();
    }

    public Class<Hand> typeClass() {
        return Hand.class;
    }

    public String messageName() {
        return Hand.class.getSimpleName();
    }

    public String messageFullName() {
        return Hand.class.getName();
    }


    public boolean isInitialized(Hand message) {
        return true;
    }


    public void mergeFrom(Input input, Hand message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, Hand message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_RANK:
                message.setRank(RankType.valueOf(input.readEnum()));
                break;
            case FIELD_CARDS:
                message.setCards(input.readBytes());
                break;
            case FIELD_VALUE:
                message.setValue(input.readBytes());
                break;
            case FIELD_HIGH:
                message.setHigh(input.readBytes());
                break;
            case FIELD_KICKER:
                message.setKicker(input.readBytes());
                break;
            case FIELD_STRING:
                message.setString(input.readString());
                break;
            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_RANK, FIELD_CARDS, FIELD_VALUE, FIELD_HIGH, FIELD_KICKER, FIELD_STRING };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, Hand message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, Hand message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_RANK:
                output.writeEnum(FIELD_RANK, message.getRank().number, false);    break;
            case FIELD_CARDS:
                output.writeBytes(FIELD_CARDS, message.getCards(), false);
                break;
            case FIELD_VALUE:
                output.writeBytes(FIELD_VALUE, message.getValue(), false);
                break;
            case FIELD_HIGH:
                if (message.getHigh() != null)
                    output.writeBytes(FIELD_HIGH, message.getHigh(), false);
                break;
            case FIELD_KICKER:
                if (message.getKicker() != null)
                    output.writeBytes(FIELD_KICKER, message.getKicker(), false);
                break;
            case FIELD_STRING:
                if (message.getString() != null)
                    output.writeString(FIELD_STRING, message.getString(), false);
                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_RANK: return "rank";
            case FIELD_CARDS: return "cards";
            case FIELD_VALUE: return "value";
            case FIELD_HIGH: return "high";
            case FIELD_KICKER: return "kicker";
            case FIELD_STRING: return "string";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("rank", FIELD_RANK);
        fieldMap.put("cards", FIELD_CARDS);
        fieldMap.put("value", FIELD_VALUE);
        fieldMap.put("high", FIELD_HIGH);
        fieldMap.put("kicker", FIELD_KICKER);
        fieldMap.put("string", FIELD_STRING);
    }
}
