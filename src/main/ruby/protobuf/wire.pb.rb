#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

module De
  module Pokerno
    module Protocol
      module Wire
        # forward declarations
        class Range < ::ProtocolBuffers::Message; end
        class Box < ::ProtocolBuffers::Message; end
        class Seat < ::ProtocolBuffers::Message; end
        class Table < ::ProtocolBuffers::Message; end
        class Bet < ::ProtocolBuffers::Message; end
        class Game < ::ProtocolBuffers::Message; end
        class Mix < ::ProtocolBuffers::Message; end
        class Variation < ::ProtocolBuffers::Message; end
        class Stake < ::ProtocolBuffers::Message; end
        class Hand < ::ProtocolBuffers::Message; end

        # enums
        module DealType
          include ::ProtocolBuffers::Enum

          set_fully_qualified_name "de.pokerno.protocol.wire.DealType"

          BOARD = 1
          HOLE = 2
          DOOR = 3
        end

        class Range < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.wire.Range"

          required :double, :Min, 1
          required :double, :Max, 2
        end

        class Box < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.wire.Box"

          required :int32, :Pos, 1
          required :string, :Player, 2
        end

        class Seat < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module SeatState
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.wire.Seat.SeatState"

            EMPTY = 0
            TAKEN = 1
            READY = 2
            WAIT_BB = 3
            POST_BB = 4
            PLAY = 5
            ALL_IN = 6
            BET = 7
            FOLD = 8
            AUTO = 9
            IDLE = 10
            AWAY = 11
          end

          set_fully_qualified_name "de.pokerno.protocol.wire.Seat"

          optional ::De::Pokerno::Protocol::Wire::Seat::SeatState, :State, 1
          optional :string, :Player, 2
          optional :double, :StackAmount, 3
          optional :double, :PutAmount, 4
        end

        class Table < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module TableState
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.wire.Table.TableState"

            WAITING = 1
            ACTIVE = 2
            PAUSED = 3
            CLOSED = 4
          end

          set_fully_qualified_name "de.pokerno.protocol.wire.Table"

          required :int32, :Size, 2
          required :int32, :Button, 3
          repeated ::De::Pokerno::Protocol::Wire::Seat, :Seats, 4
          optional ::De::Pokerno::Protocol::Wire::Table::TableState, :State, 5
        end

        class Bet < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module BetType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.wire.Bet.BetType"

            ANTE = 1
            BRING_IN = 2
            SB = 3
            BB = 4
            GUEST_BLIND = 5
            STRADDLE = 6
            RAISE = 7
            CALL = 8
            CHECK = 9
            FOLD = 10
            ALLIN = 11
          end

          set_fully_qualified_name "de.pokerno.protocol.wire.Bet"

          required ::De::Pokerno::Protocol::Wire::Bet::BetType, :Type, 1
          optional :double, :Amount, 2
        end

        class Game < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module GameType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.wire.Game.GameType"

            TEXAS = 0
            OMAHA = 1
            OMAHA_8 = 2
            STUD = 3
            STUD_8 = 4
            RAZZ = 9
            LONDON = 10
            FIVE_CARD = 11
            SINGLE_27 = 12
            TRIPLE_27 = 13
            BADUGI = 14
          end

          module GameLimit
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.wire.Game.GameLimit"

            NL = 0
            PL = 1
            FL = 2
          end

          set_fully_qualified_name "de.pokerno.protocol.wire.Game"

          required ::De::Pokerno::Protocol::Wire::Game::GameType, :Type, 1
          required ::De::Pokerno::Protocol::Wire::Game::GameLimit, :Limit, 2
          required :int32, :TableSize, 3
        end

        class Mix < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module MixType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.wire.Mix.MixType"

            HORSE = 1
            EIGHT_GAME = 2
          end

          set_fully_qualified_name "de.pokerno.protocol.wire.Mix"

          required ::De::Pokerno::Protocol::Wire::Mix::MixType, :Type, 1
          required :int32, :TableSize, 2
        end

        class Variation < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module VariationType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.wire.Variation.VariationType"

            GAME = 1
            MIX = 2
          end

          set_fully_qualified_name "de.pokerno.protocol.wire.Variation"

          required ::De::Pokerno::Protocol::Wire::Variation::VariationType, :Type, 1
          optional ::De::Pokerno::Protocol::Wire::Game, :Game, 2
          optional ::De::Pokerno::Protocol::Wire::Mix, :Mix, 3
        end

        class Stake < ::ProtocolBuffers::Message
          set_fully_qualified_name "de.pokerno.protocol.wire.Stake"

          required :double, :BigBlind, 1
          optional :double, :SmallBlind, 2
          optional :double, :Ante, 3
          optional :double, :BringIn, 4
        end

        class Hand < ::ProtocolBuffers::Message
          # forward declarations

          # enums
          module RankType
            include ::ProtocolBuffers::Enum

            set_fully_qualified_name "de.pokerno.protocol.wire.Hand.RankType"

            HIGH_CARD = 0
            ONE_PAIR = 1
            TWO_PAIR = 2
            THREE_KIND = 3
            STRAIGHT = 4
            FLUSH = 5
            FULL_HOUSE = 6
            FOUR_KIND = 7
            STRAIGHT_FLUSH = 8
            BADUGI1 = 9
            BADUGI2 = 10
            BADUGI3 = 11
            BADUGI4 = 12
            NOT_LOW = 13
            LOW = 14
          end

          set_fully_qualified_name "de.pokerno.protocol.wire.Hand"

          required ::De::Pokerno::Protocol::Wire::Hand::RankType, :Rank, 1
          required :bytes, :Cards, 2
          required :bytes, :Value, 3
          optional :bytes, :High, 4
          optional :bytes, :Kicker, 5
          optional :string, :String, 6
        end

      end
    end
  end
end
