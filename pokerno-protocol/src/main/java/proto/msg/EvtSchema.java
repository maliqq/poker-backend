// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from msg.proto

package proto.msg;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class EvtSchema
       implements Schema<de.pokerno.protocol.msg.Evt> {

    public enum EventType implements com.dyuproject.protostuff.EnumLite<EventType>
    {
        SEAT(1),
        ACTION(2),
        TABLE(3),
        GAMEPLAY(4),
        STAGE(5);
        
        public final int number;
        
        private EventType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static EventType valueOf(int number)
        {
            switch(number) 
            {
                case 1: return SEAT;
                case 2: return ACTION;
                case 3: return TABLE;
                case 4: return GAMEPLAY;
                case 5: return STAGE;
                default: return null;
            }
        }
    }


    static final de.pokerno.protocol.msg.Evt DEFAULT_INSTANCE = new de.pokerno.protocol.msg.Evt();
    static final Schema<de.pokerno.protocol.msg.Evt> SCHEMA = new EvtSchema();

    public static de.pokerno.protocol.msg.Evt getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<de.pokerno.protocol.msg.Evt> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_TYPE = 1;
    public static final int FIELD_SEAT_EVENT = 2;
    public static final int FIELD_ACTION_EVENT = 3;
    public static final int FIELD_TABLE_EVENT = 4;
    public static final int FIELD_GAMEPLAY_EVENT = 5;
    public static final int FIELD_STAGE_EVENT = 6;

    public EvtSchema() {}


    public de.pokerno.protocol.msg.Evt newMessage() {
        return new de.pokerno.protocol.msg.Evt();
    }

    public Class<de.pokerno.protocol.msg.Evt> typeClass() {
        return de.pokerno.protocol.msg.Evt.class;
    }

    public String messageName() {
        return de.pokerno.protocol.msg.Evt.class.getSimpleName();
    }

    public String messageFullName() {
        return de.pokerno.protocol.msg.Evt.class.getName();
    }


    public boolean isInitialized(de.pokerno.protocol.msg.Evt message) {
        return true;
    }


    public void mergeFrom(Input input, de.pokerno.protocol.msg.Evt message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, de.pokerno.protocol.msg.Evt message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_TYPE:
                message.setType(EventType.valueOf(input.readEnum()));
                break;
            case FIELD_SEAT_EVENT:
                message.setSeatEvent(input.mergeObject(message.getSeatEvent(), SeatEventSchema.getSchema()));
                break;

            case FIELD_ACTION_EVENT:
                message.setActionEvent(input.mergeObject(message.getActionEvent(), ActionEventSchema.getSchema()));
                break;

            case FIELD_TABLE_EVENT:
                message.setTableEvent(input.mergeObject(message.getTableEvent(), TableEventSchema.getSchema()));
                break;

            case FIELD_GAMEPLAY_EVENT:
                message.setGameplayEvent(input.mergeObject(message.getGameplayEvent(), GameplayEventSchema.getSchema()));
                break;

            case FIELD_STAGE_EVENT:
                message.setStageEvent(input.mergeObject(message.getStageEvent(), StageEventSchema.getSchema()));
                break;

            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_TYPE, FIELD_SEAT_EVENT, FIELD_ACTION_EVENT, FIELD_TABLE_EVENT, FIELD_GAMEPLAY_EVENT, FIELD_STAGE_EVENT };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, de.pokerno.protocol.msg.Evt message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, de.pokerno.protocol.msg.Evt message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_TYPE:
                output.writeEnum(FIELD_TYPE, message.getType().number, false);    break;
            case FIELD_SEAT_EVENT:
                if (message.getSeatEvent() != null)
                    output.writeObject(FIELD_SEAT_EVENT, message.getSeatEvent(), SeatEventSchema.getSchema(), false);

                break;
            case FIELD_ACTION_EVENT:
                if (message.getActionEvent() != null)
                    output.writeObject(FIELD_ACTION_EVENT, message.getActionEvent(), ActionEventSchema.getSchema(), false);

                break;
            case FIELD_TABLE_EVENT:
                if (message.getTableEvent() != null)
                    output.writeObject(FIELD_TABLE_EVENT, message.getTableEvent(), TableEventSchema.getSchema(), false);

                break;
            case FIELD_GAMEPLAY_EVENT:
                if (message.getGameplayEvent() != null)
                    output.writeObject(FIELD_GAMEPLAY_EVENT, message.getGameplayEvent(), GameplayEventSchema.getSchema(), false);

                break;
            case FIELD_STAGE_EVENT:
                if (message.getStageEvent() != null)
                    output.writeObject(FIELD_STAGE_EVENT, message.getStageEvent(), StageEventSchema.getSchema(), false);

                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_TYPE: return "type";
            case FIELD_SEAT_EVENT: return "seatEvent";
            case FIELD_ACTION_EVENT: return "actionEvent";
            case FIELD_TABLE_EVENT: return "tableEvent";
            case FIELD_GAMEPLAY_EVENT: return "gameplayEvent";
            case FIELD_STAGE_EVENT: return "stageEvent";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("type", FIELD_TYPE);
        fieldMap.put("seatEvent", FIELD_SEAT_EVENT);
        fieldMap.put("actionEvent", FIELD_ACTION_EVENT);
        fieldMap.put("tableEvent", FIELD_TABLE_EVENT);
        fieldMap.put("gameplayEvent", FIELD_GAMEPLAY_EVENT);
        fieldMap.put("stageEvent", FIELD_STAGE_EVENT);
    }
}
