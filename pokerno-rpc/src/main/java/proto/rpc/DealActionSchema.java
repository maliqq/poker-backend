// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from rpc.proto

package proto.rpc;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class DealActionSchema
       implements Schema<de.pokerno.protocol.rpc.DealAction> {

    public enum ActionType implements com.dyuproject.protostuff.EnumLite<ActionType>
    {
        ADD_BET(1),
        DEAL_CARDS(2),
        DISCARD_CARDS(3),
        SHOW_CARDS(4);
        
        public final int number;
        
        private ActionType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static ActionType valueOf(int number)
        {
            switch(number) 
            {
                case 1: return ADD_BET;
                case 2: return DEAL_CARDS;
                case 3: return DISCARD_CARDS;
                case 4: return SHOW_CARDS;
                default: return null;
            }
        }
    }


    static final de.pokerno.protocol.rpc.DealAction DEFAULT_INSTANCE = new de.pokerno.protocol.rpc.DealAction();
    static final Schema<de.pokerno.protocol.rpc.DealAction> SCHEMA = new DealActionSchema();

    public static de.pokerno.protocol.rpc.DealAction getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<de.pokerno.protocol.rpc.DealAction> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_TYPE = 1;
    public static final int FIELD_ADD_BET = 2;
    public static final int FIELD_DEAL_CARDS = 3;
    public static final int FIELD_DISCARD_CARDS = 4;
    public static final int FIELD_SHOW_CARDS = 5;

    public DealActionSchema() {}


    public de.pokerno.protocol.rpc.DealAction newMessage() {
        return new de.pokerno.protocol.rpc.DealAction();
    }

    public Class<de.pokerno.protocol.rpc.DealAction> typeClass() {
        return de.pokerno.protocol.rpc.DealAction.class;
    }

    public String messageName() {
        return de.pokerno.protocol.rpc.DealAction.class.getSimpleName();
    }

    public String messageFullName() {
        return de.pokerno.protocol.rpc.DealAction.class.getName();
    }


    public boolean isInitialized(de.pokerno.protocol.rpc.DealAction message) {
        return true;
    }


    public void mergeFrom(Input input, de.pokerno.protocol.rpc.DealAction message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, de.pokerno.protocol.rpc.DealAction message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_TYPE:
                message.setType(ActionType.valueOf(input.readEnum()));
                break;
            case FIELD_ADD_BET:
                message.setAddBet(input.mergeObject(message.getAddBet(), proto.cmd.AddBetSchema.getSchema()));
                break;

            case FIELD_DEAL_CARDS:
                message.setDealCards(input.mergeObject(message.getDealCards(), proto.cmd.DealCardsSchema.getSchema()));
                break;

            case FIELD_DISCARD_CARDS:
                message.setDiscardCards(input.mergeObject(message.getDiscardCards(), proto.cmd.DiscardCardsSchema.getSchema()));
                break;

            case FIELD_SHOW_CARDS:
                message.setShowCards(input.mergeObject(message.getShowCards(), proto.cmd.ShowCardsSchema.getSchema()));
                break;

            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_TYPE, FIELD_ADD_BET, FIELD_DEAL_CARDS, FIELD_DISCARD_CARDS, FIELD_SHOW_CARDS };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, de.pokerno.protocol.rpc.DealAction message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, de.pokerno.protocol.rpc.DealAction message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_TYPE:
                output.writeEnum(FIELD_TYPE, message.getType().number, false);    break;
            case FIELD_ADD_BET:
                if (message.getAddBet() != null)
                    output.writeObject(FIELD_ADD_BET, message.getAddBet(), proto.cmd.AddBetSchema.getSchema(), false);

                break;
            case FIELD_DEAL_CARDS:
                if (message.getDealCards() != null)
                    output.writeObject(FIELD_DEAL_CARDS, message.getDealCards(), proto.cmd.DealCardsSchema.getSchema(), false);

                break;
            case FIELD_DISCARD_CARDS:
                if (message.getDiscardCards() != null)
                    output.writeObject(FIELD_DISCARD_CARDS, message.getDiscardCards(), proto.cmd.DiscardCardsSchema.getSchema(), false);

                break;
            case FIELD_SHOW_CARDS:
                if (message.getShowCards() != null)
                    output.writeObject(FIELD_SHOW_CARDS, message.getShowCards(), proto.cmd.ShowCardsSchema.getSchema(), false);

                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_TYPE: return "type";
            case FIELD_ADD_BET: return "addBet";
            case FIELD_DEAL_CARDS: return "dealCards";
            case FIELD_DISCARD_CARDS: return "discardCards";
            case FIELD_SHOW_CARDS: return "showCards";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("type", FIELD_TYPE);
        fieldMap.put("addBet", FIELD_ADD_BET);
        fieldMap.put("dealCards", FIELD_DEAL_CARDS);
        fieldMap.put("discardCards", FIELD_DISCARD_CARDS);
        fieldMap.put("showCards", FIELD_SHOW_CARDS);
    }
}
