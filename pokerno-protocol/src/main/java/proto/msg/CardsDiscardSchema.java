// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from msg.proto

package proto.msg;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class CardsDiscardSchema
       implements Schema<de.pokerno.protocol.msg.CardsDiscard> {


    static final de.pokerno.protocol.msg.CardsDiscard DEFAULT_INSTANCE = new de.pokerno.protocol.msg.CardsDiscard();
    static final Schema<de.pokerno.protocol.msg.CardsDiscard> SCHEMA = new CardsDiscardSchema();

    public static de.pokerno.protocol.msg.CardsDiscard getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<de.pokerno.protocol.msg.CardsDiscard> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_POS = 1;
    public static final int FIELD_PLAYER = 2;
    public static final int FIELD_CARDS_NUM = 3;

    public CardsDiscardSchema() {}


    public de.pokerno.protocol.msg.CardsDiscard newMessage() {
        return new de.pokerno.protocol.msg.CardsDiscard();
    }

    public Class<de.pokerno.protocol.msg.CardsDiscard> typeClass() {
        return de.pokerno.protocol.msg.CardsDiscard.class;
    }

    public String messageName() {
        return de.pokerno.protocol.msg.CardsDiscard.class.getSimpleName();
    }

    public String messageFullName() {
        return de.pokerno.protocol.msg.CardsDiscard.class.getName();
    }


    public boolean isInitialized(de.pokerno.protocol.msg.CardsDiscard message) {
        return true;
    }


    public void mergeFrom(Input input, de.pokerno.protocol.msg.CardsDiscard message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, de.pokerno.protocol.msg.CardsDiscard message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_POS:
                message.setPos(input.readInt32());
                break;
            case FIELD_PLAYER:
                message.setPlayer(input.readString());
                break;
            case FIELD_CARDS_NUM:
                message.setCardsNum(input.readInt32());
                break;
            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_POS, FIELD_PLAYER, FIELD_CARDS_NUM };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, de.pokerno.protocol.msg.CardsDiscard message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, de.pokerno.protocol.msg.CardsDiscard message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_POS:
                output.writeInt32(FIELD_POS, message.getPos(), false);
                break;
            case FIELD_PLAYER:
                output.writeString(FIELD_PLAYER, message.getPlayer(), false);
                break;
            case FIELD_CARDS_NUM:
                output.writeInt32(FIELD_CARDS_NUM, message.getCardsNum(), false);
                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_POS: return "pos";
            case FIELD_PLAYER: return "player";
            case FIELD_CARDS_NUM: return "cardsNum";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("pos", FIELD_POS);
        fieldMap.put("player", FIELD_PLAYER);
        fieldMap.put("cardsNum", FIELD_CARDS_NUM);
    }
}
