// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from rpc.proto

package de.pokerno.protocol.rpc;

import java.io.IOException;

import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;
import com.dyuproject.protostuff.UninitializedMessageException;

public class TableActionSchema
       implements Schema<TableAction> {

    public enum ActionType implements com.dyuproject.protostuff.EnumLite<ActionType>
    {
        JOIN_PLAYER(1),
        KICK_PLAYER(2),
        CHAT(3);
        
        public final int number;
        
        private ActionType (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static ActionType valueOf(int number)
        {
            switch(number) 
            {
                case 1: return JOIN_PLAYER;
                case 2: return KICK_PLAYER;
                case 3: return CHAT;
                default: return null;
            }
        }
    }


    static final TableAction DEFAULT_INSTANCE = new TableAction();
    static final Schema<TableAction> SCHEMA = new TableActionSchema();

    public static TableAction getDefaultInstance() { return DEFAULT_INSTANCE; }
    public static Schema<TableAction> getSchema() { return SCHEMA; }

    public static final int FIELD_NONE = 0;
    public static final int FIELD_TYPE = 1;
    public static final int FIELD_JOIN_PLAYER = 2;
    public static final int FIELD_KICK_PLAYER = 3;
    public static final int FIELD_CHAT = 4;

    public TableActionSchema() {}


    public TableAction newMessage() {
        return new TableAction();
    }

    public Class<TableAction> typeClass() {
        return TableAction.class;
    }

    public String messageName() {
        return TableAction.class.getSimpleName();
    }

    public String messageFullName() {
        return TableAction.class.getName();
    }


    public boolean isInitialized(TableAction message) {
        return true;
    }


    public void mergeFrom(Input input, TableAction message) throws IOException {
        for (int fieldIx = input.readFieldNumber(this); fieldIx != FIELD_NONE; fieldIx = input.readFieldNumber(this)) {
            mergeFrom(input, message, fieldIx);
        }
    }

    public void mergeFrom(Input input, TableAction message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                return;
            case FIELD_TYPE:
                message.setType(ActionType.valueOf(input.readEnum()));
                break;
            case FIELD_JOIN_PLAYER:
                message.setJoinPlayer(input.mergeObject(message.getJoinPlayer(), JoinPlayerSchema.getSchema()));
                break;

            case FIELD_KICK_PLAYER:
                message.setKickPlayer(input.mergeObject(message.getKickPlayer(), KickPlayerSchema.getSchema()));
                break;

            case FIELD_CHAT:
                message.setChat(input.mergeObject(message.getChat(), ChatSchema.getSchema()));
                break;

            default:
                input.handleUnknownField(fieldIx, this);
        }
    }


    private static int[] FIELDS_TO_WRITE = { FIELD_TYPE, FIELD_JOIN_PLAYER, FIELD_KICK_PLAYER, FIELD_CHAT };

    public int[] getWriteFields() { return FIELDS_TO_WRITE; }

    public void writeTo(Output output, TableAction message) throws IOException {
        int[] toWrite = getWriteFields();
        for (int i = 0; i < toWrite.length; i++) {
            writeTo(output, message, toWrite[i]);
        }
    }

    public void writeTo(Output output, TableAction message, int fieldIx) throws IOException {
        switch (fieldIx) {
            case FIELD_NONE:
                break;
            case FIELD_TYPE:
                output.writeEnum(FIELD_TYPE, message.getType().number, false);    break;
            case FIELD_JOIN_PLAYER:
                if (message.getJoinPlayer() != null)
                    output.writeObject(FIELD_JOIN_PLAYER, message.getJoinPlayer(), JoinPlayerSchema.getSchema(), false);

                break;
            case FIELD_KICK_PLAYER:
                if (message.getKickPlayer() != null)
                    output.writeObject(FIELD_KICK_PLAYER, message.getKickPlayer(), KickPlayerSchema.getSchema(), false);

                break;
            case FIELD_CHAT:
                if (message.getChat() != null)
                    output.writeObject(FIELD_CHAT, message.getChat(), ChatSchema.getSchema(), false);

                break;
            default:
                break;
        }
    }

    public String getFieldName(int number) {
        switch(number) {
            case FIELD_TYPE: return "type";
            case FIELD_JOIN_PLAYER: return "joinPlayer";
            case FIELD_KICK_PLAYER: return "kickPlayer";
            case FIELD_CHAT: return "chat";
            default: return null;
        }
    }

    public int getFieldNumber(String name) {
        final Integer number = fieldMap.get(name);
        return number == null ? 0 : number.intValue();
    }

    final java.util.Map<String, Integer> fieldMap = new java.util.HashMap<String, Integer>(); {
        fieldMap.put("type", FIELD_TYPE);
        fieldMap.put("joinPlayer", FIELD_JOIN_PLAYER);
        fieldMap.put("kickPlayer", FIELD_KICK_PLAYER);
        fieldMap.put("chat", FIELD_CHAT);
    }
}
